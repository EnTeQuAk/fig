{"name":"Fig","tagline":"Punctual, lightweight development environments using Docker","body":"Fig\r\n====\r\n\r\nPunctual, lightweight development environments using Docker.\r\n\r\nFig is tool for defining and running isolated application environments. It uses simple, version-controllable YAML configuration files that look something like this:\r\n\r\n```yaml\r\nweb:\r\n  build: .\r\n  links:\r\n   - db\r\n  ports:\r\n   - 8000:8000\r\ndb:\r\n  image: orchardup/postgresql\r\n```\r\n\r\nInstalling\r\n----------\r\n\r\n```bash\r\n$ sudo pip install fig\r\n```\r\n\r\nDefining your app\r\n-----------------\r\n\r\nPut a `fig.yml` in your app's directory. Each top-level key defines a \"service\", such as a web app, database or cache. For each service, Fig will start a Docker container, so at minimum it needs to know what image to use.\r\n\r\nThe simplest way to get started is to just give it an image name:\r\n\r\n```yaml\r\ndb:\r\n  image: orchardup/postgresql\r\n```\r\n\r\nYou've now given Fig the minimal amount of configuration it needs to run:\r\n\r\n```bash\r\n$ fig up\r\nPulling image orchardup/postgresql...\r\nStarting myapp_db_1...\r\nmyapp_db_1 is running at 127.0.0.1:45678\r\n<...output from postgresql server...>\r\n```\r\n\r\nFor each service you've defined, Fig will start a Docker container with the specified image, building or pulling it if necessary. You now have a PostgreSQL server running at `127.0.0.1:45678`.\r\n\r\nBy default, `fig up` will run until each container has shut down, and relay their output to the terminal. To run in the background instead, pass the `-d` flag:\r\n\r\n```bash\r\n$ fig up -d\r\nStarting myapp_db_1... done\r\nmyapp_db_1 is running at 127.0.0.1:45678\r\n\r\n$ fig ps\r\nName         State  Ports\r\n------------------------------------\r\nmyapp_db_1   Up     5432->45678/tcp\r\n```\r\n\r\n### Building services\r\n\r\nFig can automatically build images for you if your service specifies a directory with a `Dockerfile` in it (or a Git URL, as per the `docker build` command).\r\n\r\nThis example will build an image with `app.py` inside it:\r\n\r\n#### app.py\r\n\r\n```python\r\nprint \"Hello world!\"\r\n```\r\n\r\n#### fig.yml\r\n\r\n```yaml\r\nweb:\r\n  build: .\r\n```\r\n\r\n#### Dockerfile\r\n\r\n    FROM ubuntu:12.04\r\n    RUN apt-get install python\r\n    ADD . /opt\r\n    WORKDIR /opt\r\n    CMD python app.py\r\n\r\n\r\n\r\n### Getting your code in\r\n\r\nIf you want to work on an application being run by Fig, you probably don't want to have to rebuild your image every time you make a change. To solve this, you can share the directory with the container using a volume so the changes are reflected immediately:\r\n\r\n```yaml\r\nweb:\r\n  build: .\r\n  volumes:\r\n   - .:/opt\r\n```\r\n\r\n\r\n### Communicating between containers\r\n\r\nYour web app will probably need to talk to your database. You can use [Docker links](http://docs.docker.io/en/latest/use/port_redirection/#linking-a-container) to enable containers to communicate, pass in the right IP address and port via environment variables:\r\n\r\n```yaml\r\ndb:\r\n  image: orchardup/postgresql\r\n\r\nweb:\r\n  build: .\r\n  links:\r\n   - db\r\n```\r\n\r\nThis will pass an environment variable called `MYAPP_DB_1_PORT` into the web container, whose value will look like `tcp://172.17.0.4:45678`. Your web app's code can use that to connect to the database. To see all of the environment variables available, run `env` inside a container:\r\n\r\n```bash\r\n$ fig up -d db\r\n$ fig run web env\r\n```\r\n\r\n\r\n### Container configuration options\r\n\r\nYou can pass extra configuration options to a container, much like with `docker run`:\r\n\r\n```yaml\r\nweb:\r\n  build: .\r\n\r\n  -- override the default command\r\n  command: bundle exec thin -p 3000\r\n\r\n  -- expose ports, optionally specifying both host and container ports (a random host port will be chosen otherwise)\r\n  ports:\r\n   - 3000\r\n   - 8000:8000\r\n\r\n  -- map volumes\r\n  volumes:\r\n   - cache/:/tmp/cache\r\n\r\n  -- add environment variables\r\n  environment:\r\n   RACK_ENV: development\r\n```\r\n\r\n\r\nRunning a one-off command\r\n-------------------------\r\n\r\nIf you want to run a management command, use `fig run` to start a one-off container:\r\n\r\n```bash\r\n$ fig run db createdb myapp_development\r\n$ fig run web rake db:migrate\r\n$ fig run web bash\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}